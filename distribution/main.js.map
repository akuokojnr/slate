{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./electron sync","webpack:///./electron/main.js","webpack:///external \"electron\"","webpack:///external \"path\""],"names":["require","app","BrowserWindow","path","createWindow","mainWindow","width","height","webPreferences","preload","join","__dirname","nodeIntegration","webContents","openDevTools","loadURL","console","log","whenReady","then","on","getAllWindows","length","process","platform","quit"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,qD;;;;;;;;;;;ACRA;eAC+BA,mBAAO,CAAC,0BAAD,C;IAA9BC,G,YAAAA,G;IAAKC,a,YAAAA,a;;AACb,IAAMC,IAAI,GAAGH,mBAAO,CAAC,kBAAD,CAApB,C,CAEA;AACA;;;AAEA,SAASI,YAAT,GAAwB;AACtB;AACA,MAAMC,UAAU,GAAG,IAAIH,aAAJ,CAAkB;AACnCI,SAAK,EAAE,GAD4B;AAEnCC,UAAM,EAAE,GAF2B;AAGnCC,kBAAc,EAAE;AACdC,aAAO,EAAEN,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,YAArB,CADK;AAEdC,qBAAe,EAAE;AAFH;AAHmB,GAAlB,CAAnB,CAFsB,CAUtB;;AACAP,YAAU,CAACQ,WAAX,CAAuBC,YAAvB,GAXsB,CAYtB;;AACAT,YAAU,CAACU,OAAX,CAAmB,uBAAnB;AACAC,SAAO,CAACC,GAAR,CAAY,gBAAZ;;AACAjB,mDAAQG,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,sBAArB,EAA6C,SAA7C,CAAD,CAAP;AACD,C,CAED;AACA;AACA;;;AACAV,GAAG,CAACiB,SAAJ,GAAgBC,IAAhB,CAAqB,YAAM;AACzBf,cAAY;AAEZH,KAAG,CAACmB,EAAJ,CAAO,UAAP,EAAmB,YAAY;AAC7B;AACA;AACA,QAAIlB,aAAa,CAACmB,aAAd,GAA8BC,MAA9B,KAAyC,CAA7C,EAAgDlB,YAAY;AAC7D,GAJD;AAKD,CARD,E,CAUA;AACA;AACA;;AACAH,GAAG,CAACmB,EAAJ,CAAO,mBAAP,EAA4B,YAAY;AACtC,MAAIG,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmCvB,GAAG,CAACwB,IAAJ;AACpC,CAFD,E,CAIA;AACA,uE;;;;;;;;;;;;AC9CA,qC;;;;;;;;;;;ACAA,iC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./electron/main.js\");\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./electron sync recursive\";","// Modules to control application life and create native browser window\nconst { app, BrowserWindow } = require(\"electron\");\nconst path = require(\"path\");\n\n// const { fork } = require(\"child_process\");\n// const ps = fork(path.join(__dirname, \"..\", \"index.js\"));\n\nfunction createWindow() {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, \"preload.js\"),\n      nodeIntegration: true,\n    },\n  });\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n  // and load the index.html of the app.\n  mainWindow.loadURL(\"http://localhost:1337\");\n  console.log(\"window created\");\n  require(path.join(__dirname, \"../nodedistribution/\", \"main.js\"));\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on(\"activate\", function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", function () {\n  if (process.platform !== \"darwin\") app.quit();\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n","module.exports = require(\"electron\");","module.exports = require(\"path\");"],"sourceRoot":""}